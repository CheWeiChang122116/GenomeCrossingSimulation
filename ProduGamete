# ProduGamete: produce gamete
# parameter:
# 1. crossindx: the index matrix generated by ChromosomeShuffle
# 2. gamdata: the list of genotype matrix generated by GenoTransfer
# 3. each.rep: how many gametes should produce for each individual in "gamdata" (can be a vector) 
#    (suggest to set as the number of replication of progeny. 
#     the row number of matrix in gamdata times each.rep must be equal to the row number of crossindx)
ProduGamete <- function(crossindx, gamdata, each.rep = 1){
  if(is.matrix(gamdata[[1]])){
    nind <- nrow(gamdata[[1]])
    linenam <- rownames(gamdata[[1]])
  }else{
    nind <- 1
  }
  
  
  totalgam <- nrow(crossindx)
  if(totalgam!=(nind*each.rep)){stop("The expected number of gametes does match to the dimension of index matrix.")}
  if(length(each.rep)==1){
    repindx <- rep(1:nind, each = each.rep)
  }else{
    repindx <- unlist(mapply(a = 1:nind, b = each.rep, function(a,b){rep(a,b)}))
  }
  if(nind!=1){
    geno1 <- gamdata[[1]][repindx,]
    geno2 <- gamdata[[2]][repindx,]
    parent.name <- linenam[repindx]
  }else{
    geno1 <- gamdata[[1]][repindx]
    geno2 <- gamdata[[2]][repindx]
  }
  
  gpart1 <- crossindx*geno1
  gpart2 <- abs(crossindx-1)*geno2
  gout <- gpart1 + gpart2
  if(exists("parent.name")){
    return(list("genotype" = gout, "parent" = parent.name))
  }else{
    return(list("genotype" = gout, "parent" = NULL))
  }
  
  
} # ProduGamete end
