# CrossPos: create a matrix as index to show the recombinant segment of chromosome
# parameter:
# 1. map: the map created by "createQTLpos", consisting of locations of markers and QTLs.
#         can be accessed by extract the first object of the list generated by "createQTLpos"
# 2. xnum: number of crossing over (output of "SampleCrossNum")
# 3. xprob: probability of crossing over (output of CrossProb)
CrossPos <- function(map, xnum, xprob){
  # the positions of crossing over are represent as a matrix consist of 0 and 1
  # 1. the rows representing gametes and colums representing loci (both markers and QTLs)
  # 2. number of rows is equal to the column number of input "xnum", which is equal to the total number of gametes
  # 3. number of columns is equal to the number of loci
  # 4. 0 means no recombination and 1 means recombination
  nloci <- nrow(map)
  ngam <- ncol(xnum)
  nchr <- length(unique(map[,1]))
  if(nchr >1 ){
    nlocibychr  <- table(map[,1]) # calculate the loci number in each chromosome
  }else{
    nlocibychr <- nloci
  }
  csnloci <-cumsum(nlocibychr)
  
  out <- matrix(NA, nrow = ngam, ncol = nloci) # creat empty container
  rownames(out) <- paste("gamete", 1:ngam, sep = "")
  colnames(out) <- rownames(map)
  edge <- c(1, csnloci[1]) # define work region in the matrix "out"
  
  for(i in 1:nchr){
    if(i!= 1){edge <- c(csnloci[i-1]+1, csnloci[i])}
    gap <-1:(nlocibychr[i]-1)
    if(is.list(xprob)){
      xpos <- lapply(xnum[i,], function(x){sort(sample(gap, size = x,replace = F, prob = xprob[[i]]), decreasing = F)})
      
    }else{
      xpos <- lapply(xnum[i,], function(x){sort(sample(gap, size = x,replace = F, prob = xprob[i]), decreasing = F)})
    }
    out[,edge[1]:edge[2]] <- matrix(unlist(lapply(xpos, FUN = function(x){
      if(length(x)>0){
        return(RecombTag(lnum = nlocibychr[i], x.pos = x))
      }else{
        return(rep(0, nlocibychr[i]))
      }
    })), byrow = TRUE, ncol = nlocibychr[i])
    
  } # for loop end
  if(any(is.na(out))){stop("Something wrong in the function")}
  return(out)
} # CrossPos end
